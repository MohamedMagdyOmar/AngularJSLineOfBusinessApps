Exception Handling:
    1- Introduction:
        - Module Objectives:
            1- Evaluate exception handling options
            2- Catch runtime errors with try/catch
            3- use global exception handler
            4- Implement failure functions for async operations

        - there are several options when implementing exception handling:
            1- prevent the error entirely
            2- catch the exception
            3- notify the user
            4- log information about the exception

        - the most common way to catch exception in angular applications are with
        try/catch block
        - or you can use global exception handler: $exceptionHandler
        - or you can use failure functions

    2- try/catch:
        a- try execution of a specific set of a code
        b- catch any runtime exceptions
        c- perform any final clean up on a success or failure

        eg:
        vm.addTags = function(tags)
        {
        try{
            var array = tags.split(',');
            vm.tags = vm.tags.concat(array);
            vm.newTags = "";
            }
        catch (e){
                alert("please enter tags")
                }
        }

        but it is better to use defensive code as below using if statement rather than using try/catch because try/catch
        may mask the actual error, for example if "vm" is undefined it will throw exception
        to enter tags although the real problem is that "vm" is undefined

        vm.addTags = function(tags)
                {
                if(tags)
                    {
                        var array = tags.split(',');
                        vm.tags = vm.tags.concat(array);
                        vm.newTags = "";
                    }
                else{
                      alert("please enter tags")
                    }
                }
