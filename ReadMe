1- Module 2 Objectives:
    a- turn business requirements into a View, Model and Controller.
    b- Organise the project structure.
    c- build the View using the appropriate directives.
    d- define the main Module of the application.
    e- Build the Controller.
    f- Define the Model.
    g- Implement the methods for the action on the page.
    h- Style the view with bootstrap.
    i- make sure that basic knowledge of angular is understood.


a- turn business requirements into a "View", "Model", and "Controller":
    - first step is to collect the requirements.
    - use this requirements to details appropriate user stories.
    - sample of the user stories:
        - As a product manager, i can:
            - "Browse" the list of products.
            - See the product "images".
            - "Select" a product to "view" details.
            - "Select" a product to "edit" details.
    - from these user stories we will generate mocked up "user interface" design [check the video]
    - from point 1-a we need to turn above user stories into "View", "Model", and "Controller".
    - the "View" will be the user interface design.
    - the "Model" will be the JSON file that hold the data for us.
    - the "Controller" will define the "data" and the "code" of the actions of the views.

    - the Controller roles are:
        1- Define the "Model" required by the "View", so the "Controller" contains the Views-Model.
            - retrieve the products, achieved by calling back end web service
        2- Implements the "Method" for any action that the "View" can perform
            - Implement the method responsible for Hide/Show Images.


b- Organising the project structure:
    - app directory:
        - contains the code specific to this application
        - has subdirectory for each primary feature in the app
    - common directory:
        - contains the code common to all parts of the application
        - "service" subdirectory define the location of common services or BL services

    - Css directory
    - fonts directory
    - images directory
    - js directory
        - for external java script files like "angular.js" or any other third party library
    - index.html:
        - contain all of the references, and launching point for our application

c- build the View using the appropriate directives.
    - in general the "View" refer to user interface in the app
    - it is used to describe both the HTML that contain the user interface markup and page generated from this html
    - some angular js documentation make a distinction:
        - a piece of html that contains user interface markup and angular directives is called a "template"
        - the loaded and transferred nad rendered result is called the "View" or "live template".
    finally: if you want to build full featured angular app we need to define that app using a "Module".

d- define the main Module of the application.
    - it defines an angular application
    - most angular app has one main module, but they can reference any number of other module.
    - it tracks all of the application code, that can be done using "registration process", each
      piece of application code is built, it can register itself in the module.
    - track all dependencies for the application
    - keeps the application modularized
    ANGULAR MODULE METHOD:
        angular.module("productManagement", [])
        - when defining a module, the module method required 2 parameters
            - first is the "module name"
            - array of dependencies [reference to any other module or library that this module uses known also as "injectables"
            because angular injects them into the parts of the application that needs them]
            - the above syntax is know as "setter method", because it is the syntax to define or set
            angular module

        angular.module("productManagement");
            - this is with one parameter not 2 as previous
            - this useful when registering other code, such as controller
            - it is called getter method for angular module, because it is used to get the reference to that module

        - the module is defined in a file called app.js


e- Build the Controller.
    - controller provide support to the view
    - it defines the model required by the view
    - it retrieve data as needed and expose it to the view to use for binding
    - in the app it will provide the "product data"
    - it implements the methods for the actions that the view perform (eg. hide and show images)
    How do you build controller that can define the model and implement the actions for the view?
    - first: define "controller function" that contains the definition of the model, and the methods
    for the actions that the view can perform
    - once the "controller function" is created the view identifies its controller function using
    "ng-controller" directives
    - the "controller function" can be defined in the "global namespace" [for prototypes only] or "registered with a module".
    - for building controller function:
        (function(){
            angular.module("productManagement").controller("ProductListCtrl",["$scope", function($scope){
            }]);
        }())
        - define IIFE function expression
        - look up the module [to register the controller with the module] using module "getter" syntax
        - register the controller with the module using the "controller" method of the module.
            - the first parameter is the controller name
            - the second parameter is an array, first element in the array is the name of the parameters to the controller function
            - in this case there is only one parameter "$scope"
            - the last element in the array, is the controller function itself
            - the purpose of defining the parameter name in this array is to ensure that
            the controller code is minified, that angular can understand the parameters name
            - write the actual code of the controller.

    - $scope:
        - is a built in angular object, that provides communication mechanism
        between the View and the Controller
        - by defining $scope to a controller function, angular inject $scope object into the controller,
        then the controller augment the scope adding the "model" for the view binding and define methods for any view actions
        - then the directives and expressions in the view can bind to the model properties or call the controller methods
        - there is alternatives to using the $scope is using "AS", to bind the model and methods to controller directly.
        - no need to pass $scope to the controller, and the model and methods are defined on the controller directly
        - in the view, the model and methods are referenced using an alias defined in the ng-controller
        - $scope still exists but behind the scenes

    - controller best practices:
        - define each controller as a separate .js file
        - name the controller in Pascal case
        - suffix the controller name with "Controller" or "Ctrl"
        - wrap the controller in an IIFE
