- Module 3 objectives:
    a - understand how data is retrieved
    b - evaluate existing angular services for calling web service
    c - build a reusable data access component
    d - modify the controller to retrieve data
    e - fake it without the web service

a - understand how data is retrieved.
    - angular do not have direct access to corp resources
    - so it need needed data from web services
    - any web service that return json can work with angular app


c - build a reusable data access component:
    - we need to put the code that retrieve the data in reusable component, because several diff parts
    of the application will need to access data
    - in angualr the recommended way to build reusable component is to create a second "module",
    and in that module create custom services containing the reusable code.

    - we will define the reusable data access compenent by building firstly a seperate module
    that we will call "Common.Services"
    - the code to create this module:
        angular.module("common.services",["ngResource"])
        we use $resource to interact with web server
    - once the "module" is built we are ready to build the custom service.
    - we need to register this service with the common services module.
    - the code looks like:
        angular.module("common.services").factory("productResource",["$resource, productResource"])

 d - modify the controller to retrieve data.
    - by default the "resource" object provides 5 methods:
        - "Get" -> send get request, and expects json object in the response
        - "Query" -> send get request, but expects json array in the response
        - "Save" -> send post request
        - "Delete" -> send delete request
        - "Remove" -> is anonymous with "Delete", it is often used in place of "Delete" because "Delete"
        is reserved word in JS
        - note that there is no "PUT" request, "Save" send "Post" request so you can use the "Post"
        or you can extend "$resource" to have "Put" request

    - now our application needs list of products
        productResource.query(function(data){
        vm.products = data;
        })
        - "CallBack" function is called upon recieving successful HTTP response
        - the response is a json data returned from the query
    - now lets remove hard coded "products" in our controller.
    - but now we do not have web service implemented, so we need to have fake web service



    