- Module 3 objectives:
    a - understand how data is retrieved
    b - evaluate existing angular services for calling web service
    c - build a reusable data access component
    d - modify the controller to retrieve data
    e - fake it without the web service

a - understand how data is retrieved.
    - angular do not have direct access to corp resources
    - so it need needed data from web services
    - any web service that return json can work with angular app


c - build a reusable data access component:
    - we need to put the code that retrieve the data in reusable component, because several diff parts
    of the application will need to access data
    - in angular the recommended way to build reusable component is to create a second "module",
    and in that module create custom services containing the reusable code.

    - we will define the reusable data access compenent by building firstly a seperate module
    that we will call "Common.Services"
    - the code to create this module:
        angular.module("common.services",["ngResource"])
        we use $resource to interact with web server
    - once the "module" is built we are ready to build the custom service.
    - we need to register this service with the common services module.
    - the code looks like:
        angular.module("common.services").factory("productResource",["$resource, productResource"])

 d - modify the controller to retrieve data.
    - by default the "resource" object provides 5 methods:
        - "Get" -> send get request, and expects json object in the response
        - "Query" -> send get request, but expects json array in the response
        - "Save" -> send post request
        - "Delete" -> send delete request
        - "Remove" -> is anonymous with "Delete", it is often used in place of "Delete" because "Delete"
        is reserved word in JS
        - note that there is no "PUT" request, "Save" send "Post" request so you can use the "Post"
        or you can extend "$resource" to have "Put" request

    - now our application needs list of products
        productResource.query(function(data){
        vm.products = data;
        })
        - "CallBack" function is called upon recieving successful HTTP response
        - the response is a json data returned from the query
    - now lets remove hard coded "products" in our controller.
    - but now we do not have web service implemented, so we need to have fake web service

e - fake it without the web service: $httpBackend
    - angular provides $httpBackend services to intercept calls to web service and fake the reposn
    - angular's fake HTTP backend implementation, and is suitable for any app using either "$http" or "resource"
    - it mocks the calls to the web service
    - it returns static data to the application
    - there are 2 implmenetations:
        - ngMock: for unit testing applications
        - ngMockE2E: for end-to-end testing or backend-less development

    - steps to mocking the web server:
        - download the ngMockE2E module
        - Create a new module that depends on ngMockE2E
        - Set up static data
        - define the fake responses to the web server calls
        - add the new module as a depenedency in the main module
        - to turn off the mocking simply remove the depenedency from the main module

    - so what is happened:
        - lets start with the controller, the controller is calling "query" method of the "productResource" service
        - that service send a RESTFUL "GET" request to a web service using the URL that we defined there
        - the "httpBackend" service is intercepting that request, so when it receives this Url, it responding with this data

    